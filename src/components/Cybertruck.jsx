/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { shaderMaterial, useGLTF } from "@react-three/drei";
import { extend, useFrame } from "@react-three/fiber";
import { useControls } from "leva";
import React, { useEffect, useRef } from "react";
import * as THREE from "three";

import disksFragment from "../shaders/disks.fragment.glsl";
import disksVertex from "../shaders/disks.vertex.glsl";
import stripesFragment from "../shaders/stripes.fragment.glsl";
import stripesVertex from "../shaders/stripes.vertex.glsl";

export const DisksShader = shaderMaterial(
  {
    uTime: 0,
    uColorA: new THREE.Color(0x000000),
    uColorB: new THREE.Color(0x000000),
    uMulti: 10.0,
  },
  disksVertex,
  disksFragment
);

export const StripesShader = shaderMaterial(
  {
    uTime: 0,
    uColorA: new THREE.Color(0x000000),
    uColorB: new THREE.Color(0x000000),
    uMulti: 42,
  },
  stripesVertex,
  stripesFragment
);

extend({ DisksShader });
extend({ StripesShader });

export function Cybertruck(props) {
  const { shader } = useControls({
    shader: { options: ["none", "disks", "stripes"] },
  });
  const disksControl = useControls("disks", {
    colorA: "#ff0000",
    colorB: "#0000ff",
    multi: 10.0,
  });

  const stripesControls = useControls("stripes", {
    colorA: "#ff0000",
    colorB: "#ffff00",
    multi: 42.0,
  });

  const { nodes, materials } = useGLTF("./models/cybertruck.gltf");

  const ref = useRef();

  useFrame((state) => {
    if (ref && ref.current) ref.current.uTime = state.clock.elapsedTime;
  });

  window.lights = materials.lights;
  useEffect(() => {
    materials.lights.toneMapped = false;
    materials.warninglights.toneMapped = false;
    materials.warninglights.color = new THREE.Color(82, 0, 0);
  });
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.interior001.geometry} material={materials.lights} />
      <mesh geometry={nodes.interior001_1.geometry} castShadow>
        <meshStandardMaterial {...materials.body} />
      </mesh>
      <mesh geometry={nodes.interior001_2.geometry}>
        <meshStandardMaterial
          opacity={0.92}
          envMapIntensity={1}
          transparent
          roughness={0.2}
          color={"black"}
        />
      </mesh>
      <mesh
        geometry={nodes.interior001_3.geometry}
        material={materials.glassframes}
        castShadow
      />
      <mesh
        geometry={nodes.interior001_4.geometry}
        material={materials.warninglights}
      />
      <mesh
        geometry={nodes.interior001_5.geometry}
        material={materials.black}
        castShadow
      />
      {shader === "disks" && (
        <mesh geometry={nodes.interior001_6.geometry}>
          <disksShader
            ref={ref}
            transparent
            uColorA={new THREE.Color(disksControl.colorA)}
            uColorB={new THREE.Color(disksControl.colorB)}
            uMulti={disksControl.multi}
          />
        </mesh>
      )}
      {shader === "stripes" && (
        <mesh geometry={nodes.interior001_6.geometry}>
          <stripesShader
            ref={ref}
            transparent
            uColorA={new THREE.Color(stripesControls.colorA)}
            uColorB={new THREE.Color(stripesControls.colorB)}
            uMulti={stripesControls.multi}
          />
        </mesh>
      )}
      <mesh geometry={nodes.steer.geometry} material={materials.gray} />
      <mesh
        geometry={nodes.tires001.geometry}
        material={materials.tires}
        castShadow
      />
      <mesh
        geometry={nodes.tires001_1.geometry}
        material={materials.rims}
        castShadow
      />
    </group>
  );
}

useGLTF.preload("./models/cybertruck.gltf");
